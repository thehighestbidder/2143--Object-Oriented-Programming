{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Samuel Edet Ukim	\
Object Oriented Programming\
HO1\
Part A: Conceptual Questions
\f1\b0 \

\f0\b Definition of a Class and an Object
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is a class in object-oriented programming?
\f1\b0  In object-oriented programming, a class is a blueprint or a template for creating objects. It defines the data (attributes or members) that an object of that class will hold and the behaviors (methods or functions) that the objects can perform. Think of it as a cookie cutter that defines the shape and properties of the cookies you can make.\
\ls1\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is an object, and how does it relate to a class?
\f1\b0  An object is a specific instance of a class. It's a concrete entity that exists in memory and has the characteristics and behaviors defined by its class. Using the cookie cutter analogy, an object is one of the actual cookies you cut out using the template. Multiple objects can be created from a single class, each with its own set of data values.\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Constructors and Destructors
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Define a constructor. What is its role in a class?
\f1\b0  A constructor is a special member function of a class that is automatically called when an object of that class is created (instantiated). Its primary role is to initialize the object's data members to appropriate initial values, ensuring that the object starts its lifecycle in a valid and usable state. Constructors can also perform other setup tasks required for the object's operation. \'a0 \uc0\u8232 \u8232 \u8232 \u8232 \u8232 \
\ls2\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Define a destructor. Why is it important in managing an object\'92s lifecycle?
\f1\b0  A destructor is another special member function of a class that is automatically called when an object of that class is about to be destroyed (goes out of scope or is explicitly deleted). Its importance lies in performing cleanup operations, such as releasing any resources (e.g., memory, file handles, network connections) that the object acquired during its lifecycle. This prevents resource leaks and ensures proper termination of the object.\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Object Lifecycle
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Briefly describe the lifecycle of an object from instantiation to destruction.
\f1\b0  The lifecycle of an object begins with its 
\f0\b instantiation
\f1\b0  or creation, where memory is allocated for it and its constructor is called to initialize its state. During its 
\f0\b active phase
\f1\b0 , the object is used by the program, its methods are called, and its data members may be modified. The lifecycle ends with 
\f0\b destruction
\f1\b0 , where the object is removed from memory and its destructor is called to perform any necessary cleanup before the memory is deallocated.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Why is it important for a class to manage its resources (e.g., memory) during its lifecycle?
\f1\b0  Proper resource management is crucial to prevent issues like memory leaks (where allocated memory is no longer used but not freed), file handle exhaustion, and other resource-related errors. If a class doesn't manage its resources, the program can become unstable, slow down, or even crash. Destructors play a key role in ensuring that resources acquired by an object are released when the object is no longer needed.\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Part B: Minimal Coding Example (C++)
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 C++\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 #include <iostream>\
#include <string>\
\
class Goblin \{\
private:\
    std::string name;\
    int health;\
\
public:\
    // Constructor\
    Goblin(std::string goblinName, int initialHealth) : name(goblinName), health(initialHealth) \{\
        std::cout << "Goblin " << name << " has been created with " << health << " health." << std::endl;\
    \}\
\
    // Destructor\
    ~Goblin() \{\
        std::cout << "Goblin " << name << " is being destroyed." << std::endl;\
    \}\
\
    // Public method to display the object's state\
    void displayState() const \{\
        std::cout << "Name: " << name << ", Health: " << health << std::endl;\
    \}\
\};\
\
int main() \{\
    Goblin grunt("Grunt", 25);\
    grunt.displayState();\
\
    \{\
        Goblin sneaky("Sneaky", 15);\
        sneaky.displayState();\
    \} // sneaky's destructor is called here\
\
    return 0; // grunt's destructor is called here\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 Explanation:
\f1\b0 \
This 
\f2\fs26 Goblin
\f1\fs24  class has a private data member 
\f2\fs26 name
\f1\fs24  and 
\f2\fs26 health
\f1\fs24 . The 
\f0\b constructor
\f1\b0  
\f2\fs26 Goblin(std::string goblinName, int initialHealth)
\f1\fs24  is called when a 
\f2\fs26 Goblin
\f1\fs24  object is created. It initializes the 
\f2\fs26 name
\f1\fs24  and 
\f2\fs26 health
\f1\fs24  using the provided arguments and prints a creation message. The 
\f0\b destructor
\f1\b0  
\f2\fs26 ~Goblin()
\f1\fs24  is automatically called when a 
\f2\fs26 Goblin
\f1\fs24  object goes out of scope or is explicitly deleted. It prints a message indicating the object's destruction. The 
\f0\b object lifecycle
\f1\b0  is managed implicitly by C++. When 
\f2\fs26 grunt
\f1\fs24  is created in 
\f2\fs26 main
\f1\fs24 , its constructor runs. When the inner block containing 
\f2\fs26 sneaky
\f1\fs24  ends, 
\f2\fs26 sneaky
\f1\fs24  goes out of scope, and its destructor is automatically called. Finally, when 
\f2\fs26 main
\f1\fs24  ends, 
\f2\fs26 grunt
\f1\fs24  goes out of scope, and its destructor is called.\

\f0\b Part C: Reflection & Short-Answer
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Importance of Constructors:
\f1\b0  Constructors are vital for ensuring an object starts in a valid state by initializing its necessary data members. This prevents objects from being created with undefined or garbage values, which could lead to unpredictable behavior or errors later in the program's execution. By enforcing initialization during creation, constructors contribute to the overall robustness and reliability of object-oriented code.\
\ls4\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Role of Destructors:
\f1\b0  Destructors are crucial for proper resource management, especially in languages like C++ without automatic garbage collection. They provide a mechanism to release resources that an object has acquired during its lifetime, such as dynamically allocated memory, open file handles, or network connections. Without destructors, these resources might not be freed, leading to resource leaks that can degrade performance and eventually cause program failure.\
\ls4\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Lifecycle Management:
\f1\b0  If a class does not properly manage its resources during its lifecycle, several negative consequences can arise. Memory leaks can occur, consuming increasing amounts of system memory and potentially leading to program crashes. Failure to release other resources like file handles or network connections can limit the availability of these resources for other parts of the program or the system. Overall, poor lifecycle management leads to inefficient, unstable, and potentially unusable software.\
}